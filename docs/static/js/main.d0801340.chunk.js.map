{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifItem.js","components/GifGrid.js","hooks/useFetchGifs.js","Gifer.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","gif","key","Gifer","categories","ReactDOM","render","document","getElementById"],"mappings":"6KAKaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAkBhD,OACE,0BAAMC,SAXa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAUP,GAAV,mBAAyBO,OAEvCN,EAAc,OAMd,2BACEO,KAAK,OACLC,MAAOT,EACPU,SAnBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,QAmBnBG,YAAY,mB,uBC5BPC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfC,EAFe,iDAEiCC,UACpDH,GAHmB,+DAKFI,MAAMF,GALJ,cAKfG,EALe,gBAOEA,EAAKC,OAPP,uBAObC,EAPa,EAObA,KAGFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MAEXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAfjB,kBAmBdM,GAnBc,4CAAH,sDCCPO,EAAU,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAE/B,OACE,yBAAKc,UAAU,8DACb,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCFGO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EACdf,mBAAS,CACjCsB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAAChB,GACtBc,EAAS,CACPf,KAAMC,EACNY,SAAS,SAGZ,CAACpB,IAEGqB,EDXmBI,CAAazB,GAA/BO,EAF+B,EAE/BA,KAAMa,EAFyB,EAEzBA,QASd,OACE,oCACE,wBAAIJ,UAAU,+DACXhB,GAEFoB,GACC,uBAAGJ,UAAU,oCAAb,eAEF,yBAAKA,UAAU,aACZT,EAAKE,KAAI,SAACiB,GAAD,OAER,kBAAC,EAAD,eAASC,IAAKD,EAAIf,IAAQe,UEvBvBE,EAAQ,WAAM,MAGW3C,mBAAS,CAAC,KAHrB,mBAGlB4C,EAHkB,KAGN7C,EAHM,KAWzB,OACE,6BACE,0DAEA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BAEG6C,EAAWpB,KAAI,SAACT,GAAD,OACd,kBAAC,EAAD,CAAS2B,IAAK3B,EAAUA,SAAUA,U,MClB5C8B,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.d0801340.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n//Importamos PropTypes para requerir que utilicen nuestro componente con los argumentos que estoy esperando\r\nimport PropTypes from \"prop-types\";\r\n\r\n//Desestructuro y solo traigo las funciones que queremos, las pasamos por argumento\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  //La función para guardar\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    //Validación para que no me tome valores vacios\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((cat) => [inputValue, ...cat]); //El input que cogemos abajo value=\r\n      //Para reiniciar el input\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n        placeholder=\"Busca tu Gif\"\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\n//Aplicacmos el PropTypes para requerir la función setCategories siempre.\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","//Función para traer los gifs\r\nexport const getGifs = async (category) => {\r\n  //Vamos a la doc de la api y configuramos con Postman lo que queremos traer\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=10&api_key=Dq6QeMq3lyeoxoOX8gEz2yoVkjXbMhEU`;\r\n  const resp = await fetch(url);\r\n  //Traemos por destructuración solo lo que necesitamos\r\n  const { data } = await resp.json();\r\n  // console.log(data);\r\n  //Extraer la info mapeando el data\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      //En url ponemos el ? para condicionar si vienen imágenes, sino que no lo utilice\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n  // console.log(gifs);\r\n  return gifs;\r\n};\r\n","import React from \"react\";\r\n\r\nexport const GifItem = ({ title, url }) => {\r\n  //console.log({ id, title, url });\r\n  return (\r\n    <div className=\"card animate__animated animate__bounce animate__delay-0.5s\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n// import { getGifs } from \"../helpers/getGifs\";\r\nimport { GifItem } from \"./GifItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  //Custom Hook\r\n  const { data, loading } = useFetchGifs(category);\r\n\r\n  //   //Hook\r\n  //   const [images, setImages] = useState([]);\r\n  //   //El useEffect evita que se generen peticiones infinitas a la api\r\n  //   useEffect(() => {\r\n  //     getGifs(category).then(setImages);\r\n  //   }, [category]); //Arreglo de dependencias se dispara solo una vez (ComponentDidMount)\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"title animate__animated animate__bounce animate__delay-0.7s\">\r\n        {category}\r\n      </h3>\r\n      {loading && (\r\n        <p className=\"animate__animated animate__flash\">Cargando...</p>\r\n      )}\r\n      <div className=\"card-grid\">\r\n        {data.map((gif) => (\r\n          //   Se usa el {...props} para enviar cada una de las propiedades de las props independiente\r\n          <GifItem key={gif.id} {...gif} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((gifs) => {\r\n      setState({\r\n        data: gifs,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]);\r\n\r\n  return state; //{data:[], loading: true}\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport const Gifer = () => {\r\n  //   const categories = [\"Baila\", \"Ríe\", \"Duerme\", \"Estudia\"];\r\n  //Hooks\r\n  const [categories, setCategories] = useState([\"\"]);\r\n\r\n  // Función para evento onClick, agrega una categoría\r\n  //   const handleAdd = () => {\r\n  //     setCategories([...categories, \"Esperar\"]);\r\n  //     // otra forma setCategories(cat => [...cat, 'Esperar']);\r\n  //   };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Gifer Tu Buscador de GIF'S</h2>\r\n      {/* Acá le pasamos las props al componente */}\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n      <ol>\r\n        {/* Función map recorre el objeto y devuelve los elementos */}\r\n        {categories.map((category) => (\r\n          <GifGrid key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Gifer } from './Gifer';\nimport './index.css';\n\n\nReactDOM.render(\n\n    <Gifer />,\n\n  document.getElementById('root')\n);"],"sourceRoot":""}